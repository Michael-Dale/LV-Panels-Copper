<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="node_modules\tabulator-tables\dist\css/tabulator_modern.min.css" rel="stylesheet">
    <title>Delivery</title>
    <!-- Add your CSS styles here -->
    <style>
      table {
        border-collapse: collapse;
        width: 100%;
      }

      th,
      td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
      }

      th {
        background-color: #f2f2f2;
      }
      .hide-column {
        display: none;
      }

      #purchaseTable td:nth-child(1),
      #purchaseTable th:nth-child(1),
      #deleteRow {
        display: none;
      }
    </style>
  </head>
  <body>
    <!-- Navigation bar -->
    <div class="navbar">
      <ul>
        <li><a href="/purchase">Purchase</a></li>
        <li><a href="/delivery">Delivery</a></li>
        <li><a href="/issue">Issue</a></li>
        <li><a href="/return">Return</a></li>
        <li><a href="/count">Count</a></li>
        <li><a href="/audit">Audit</a></li>
      </ul>
    </div>

    <!-- Your main content -->
    <div class="content">
      <!-- Include your main content here -->
    </div>

    <!-- Add your JavaScript files here -->

    <h1>Delivery</h1>

    <form
      id="purchaseForm"
      class="deleteMode"
      action="/purchase"
      method="post"
      onsubmit="handleSubmit(event)"
    >
      <h2>Delivery Order</h2>
      <p>Enter purchase details</p>

      <div class="control-row">
        <label for="contractNumberDropDown">Contract Number:</label>
        <select id="contractNumberDropDown" name="contractNumberDropDown">
          <option disabled selected>Select a Contract Number</option>
          <% contractNumbers.forEach(contractNumbers => { %>
          <option value="<%= contractNumbers.ContractNumber %>">
            <%= contractNumbers.ContractNumber %>
          </option>
          <% }); %>
        </select>
      </div>

      <p class="form-actions">
        <button type="submit" class="button">Submit</button>
      </p>
    </form>
    <table id="purchaseTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>Contract Number</th>
          <th>Description</th>
          <th>Height</th>
          <th>Width</th>
          <th>Length</th>
          <th>OrderQty</th>
          <th>Qty Received</th>
          <th>Date Received</th>
          <th>Kg Per Length</th>
          <th>Total Length Ordered</th>
        </tr>
      </thead>
      <tbody></tbody>
      <!-- Empty tbody for dynamically populated rows -->
    </table>
    <button id="updateDeliveryBtn">Update Delivery</button>
    <script src="node_modules\tabulator-tables\dist/js/tabulator.min.js"></script>
    <script>
         document.getElementById("updateDeliveryBtn").addEventListener("click", function() {
    // Get all rows of the table
    const rows = document.querySelectorAll("#purchaseTable tbody tr");

    // Array to store data for update
    const updateData = [];

    // Iterate over rows and extract delivery quantities
    rows.forEach(row => {
      const deliveryQtyInput = row.querySelector("input[name='OrderQty']");
      const deliveryQty = deliveryQtyInput ? deliveryQtyInput.value.trim() : null;

      if (deliveryQty !== null && deliveryQty !== "") {
        // Extract other necessary data from the row
        const id = row.cells[0].textContent; // Assuming ID is in the first column
        const contractNumber = row.cells[1].textContent;
        const description=row.cells[2].textContent; // Assuming Contract Number is in the second column
        // Add data to updateData array
        updateData.push({ id, contractNumber, deliveryQty,description });
      }
    });

    // Send updateData to the server
    fetch("/delivery/updateDelivery", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ updateData })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then(data => {
      console.log(data); // Handle response from server if needed
    })
    .catch(error => {
      console.error("Error updating delivery:", error);
    });
  });

  
      function handleSubmit(event) {
        event.preventDefault();

        const selectedContractNumber = document.getElementById(
          "contractNumberDropDown"
        ).value;

        fetch(`/delivery/purchases/${selectedContractNumber}`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            populateTable(data);
          })
          .catch((error) => {
            console.error("Error fetching purchases:", error);
          });
      }

      function populateTable(purchases) {
        const tableBody = document.querySelector("#purchaseTable tbody");
        tableBody.innerHTML = ""; // Clear existing table body

        if (purchases.length === 0) {
          // Handle case where no purchases are returned
          const row = document.createElement("tr");
          const cell = document.createElement("td");
          cell.colSpan = "13"; // Span across all columns
          cell.textContent = "No purchases found.";
          row.appendChild(cell);
          tableBody.appendChild(row);
          return;
        }

        purchases.forEach((purchase) => {
          const row = document.createElement("tr");
          const cells = [
            purchase.ID,
            purchase.ContractNumber,
            purchase.Description,
            purchase.Height,
            purchase.Width,
            purchase.Length,
            purchase.OrderQty,
            "",
            purchase.DateReceived,
            purchase.KgPerLength,
            purchase.TotalLengthOrdered,
          ];

          cells.forEach((cellData, i) => {
            const cell = document.createElement("td");

            cell.textContent = cellData;
            if (i === 7) {
              const input = document.createElement("input");
              input.type = "number"; // Assuming these are numerical values
              input.value = purchase.QtyReceived; // Set the current value as the input's default
              input.name = "OrderQty";
              input.min = "0"; // Set minimum range
              input.max = purchase.OrderQty; // Set maximum range, adjust as needed
              cell.appendChild(input);
            } else {
              cell.textContent = cellData;
            }
            row.appendChild(cell);
          });

          tableBody.appendChild(row);
        });
        tab();
      }

      function tab()
      {
         // Initialize Tabulator on the purchaseTable
    var table = new Tabulator("#purchaseTable", {
      // Define column headers based on thead
      columns: [
        { title: "ID", field: "ID", width: 75 },
        { title: "Contract Number", field: "ContractNumber" ,minWidth: 175 },
        { title: "Description", field: "Description",width: 125  },
        { title: "Height", field: "Height" , width: 100},
        { title: "Width", field: "Width" , width: 100},
        { title: "Length", field: "Length" , width: 100},
        { title: "OrderQty", field: "OrderQty" , width: 150},
        { title: "Qty Received", field: "OrderQty" , width: 150},
        { title: "Date Received", field: "DateReceived" , width: 150},
        { title: "KgPerLength", field: "KgPerLength" , width: 150},
        { title: "PricePerLength", field: "PricePerLength" , width: 175},
        { title: "PricePerKg", field: "PricePerKg" },
        { title: "TotalLengthOrdered", field: "TotalLengthOrdered" }
      ],


      // <th>ID</th>
      //     <th>Contract Number</th>
      //     <th>Description</th>
      //     <th>Height</th>
      //     <th>Width</th>
      //     <th>Length</th>
      //     <th>OrderQty</th>
      //     <th>Qty Received</th>
      //     <th>Date Received</th>
      //     <th>Kg Per Length</th>
      //     <th>Total Length Ordered</th>
      layout: "fitColumns",
      width: "100%",
       // Set height to 400px
    height: 400,
    // Enable vertical scrolling
    scrollVertical: true,
    });
      }
    </script>
  </body>
</html>