<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Purchases</title>
    <style>
      table {
        border-collapse: collapse;
        width: 100%;
      }

      th,
      td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
      }

      th {
        background-color: #f2f2f2;
      }
      .hide-column {
        display: none;
      }

      #purchaseTable td:nth-child(1),
      #purchaseTable th:nth-child(1),
      #deleteRow {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="navbar">
      <ul>
        <li><a href="/purchase">Purchase</a></li>
        <li><a href="/delivery">Delivery</a></li>
        <li><a href="/issue">Issue</a></li>
        <li><a href="/return">Return</a></li>
        <li><a href="/count">Count</a></li>
        <li><a href="/audit">Audit</a></li>
      </ul>
    </div>
    <h2>Return Receipt</h2>
    <p>Enter return details</p>
    <form
    id="purchaseForm"
    class="deleteMode"
    action="/purchase"
    method="post"
    onsubmit="handleSubmit(event)"
  >

    <div class="control-row">
      <label for="contractNumberDropDown">Contract Number:</label>
      <select id="contractNumberDropDown" name="contractNumberDropDown">
        <option disabled selected>Select a Contract Number</option>
        <% contractNumbers.forEach(contractNumbers => { %>
        <option value="<%= contractNumbers.ContractNumber %>">
          <%= contractNumbers.ContractNumber %>
        </option>
        <% }); %>
      </select>
    </div>

    <p class="form-actions">
      <button type="submit" class="button">Submit</button>
    </p>
  </form>
    <table id="purchaseTable">
        <thead>
          <tr>
            <th>ID</th>
            <th>Contract Number</th>
            <th>Panel Number</th>
            <th>Description</th>
            <th>Height</th>
            <th>Width</th>
            <th>Length</th>
            <th>Qty Issued</th>
            <th>Issue Date</th>
          </tr>
        </thead>
        <tbody></tbody>
        <!-- Empty tbody for dynamically populated rows -->
      </table>
      <form
      id="purchaseForm"
      class="deleteMode"
      action="/purchase"
      method="post"
      onsubmit="handleReturn(event)"
    >
      <h2>Purchase Order</h2>
      <p>Enter purchase details</p>

      <div class="control">
        <label for="contractNumber">Contract Number:</label>
        <label for="contractNumber"></label>
      </div>

      <div class="control-row">
        <label for="descriptionDropdown">Description:</label>
        <select id="descriptionDropdown" name="descriptionDropdown">
          <option disabled selected>Select a Description</option>
          </option>
        </select>
      </div>

      <div class="control">
        <label for="height">Height:</label>
        <input id="height" name="height" required />
      </div>

      <div class="control">
        <label for="width">Width:</label>
        <input id="width" name="width" required />
      </div>
      <div class="control">
        <label for="length">Length:</label>
        <input id="length" name="length" required />
      </div>

      <div class="control">
        <label for="returnQty">Return Quantity:</label>
        <input id="returnQty" name="returnQty" required />
      </div>

      <p class="form-actions">
        <button type="reset" class="button button-flat">Reset</button>
        <button type="submit" class="button">Submit</button>
      </p>
    </form>

      <script>
function handleSubmit(event) {
  event.preventDefault();
  qtyInStock=[];
  const selectedContractNumber = document.getElementById("contractNumberDropDown").value;

  fetch(`/return/transactions/${selectedContractNumber}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      populateTable(data);
    })
    .catch((error) => {
      console.error("Error fetching purchases:", error);
    });
}
function handleReturn(event) {
  event.preventDefault();
  qtyInStock=[];
  const selectedContractNumber = document.getElementById("contractNumberDropDown").value;

  fetch(`/return/transactions/${selectedContractNumber}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      populateTable(data);
    })
    .catch((error) => {
      console.error("Error fetching purchases:", error);
    });
}
function populateTable(purchases) {
  const tableBody = document.querySelector("#purchaseTable tbody");
  tableBody.innerHTML = ""; // Clear existing table body

  if (purchases.length === 0) {
    // Handle case where no purchases are returned
    const row = document.createElement("tr");
    const cell = document.createElement("td");
    cell.colSpan = "13"; // Span across all columns
    cell.textContent = "No purchases found.";
    row.appendChild(cell);
    tableBody.appendChild(row);
    return;
  }

  purchases.forEach((purchase) => {
    const row = document.createElement("tr");
    row.setAttribute("data-id", purchase.ID); // Add data-id attribute for identifying the row
    const cells = [
      purchase.ID,
      purchase.ContractNumber,
      purchase.Panel,
      purchase.Description,
      purchase.Height,
      purchase.Width,
      purchase.Length,
      purchase.Qty,
      purchase.DateOfTransaction,
    ];

    cells.forEach((cellData, i) => {
  const cell = document.createElement("td");
    cell.textContent = cellData;
  
  row.appendChild(cell);
});

    tableBody.appendChild(row);
  });
}
      </script>
  </body>
</html>
