<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <style>
        table {
          border-collapse: collapse;
          width: 100%;
        }
  
        th,
        td {
          border: 1px solid #dddddd;
          text-align: left;
          padding: 8px;
        }
  
        th {
          background-color: #f2f2f2;
        }
        .hide-column {
          display: none;
        }
  
        #purchaseTable td:nth-child(1),
        #purchaseTable th:nth-child(1),
        #deleteRow {
          display: none;
        }
      </style>
</head>
<body>
    <!-- Navigation bar -->
    <div class="navbar">
        <ul>
            <li><a href="/purchase">Purchase</a></li>
            <li><a href="/delivery">Delivery</a></li>
            <li><a href="/issue">Issue</a></li>
            <li><a href="/return">Return</a></li>
            <li><a href="/count">Count</a></li>
            <li><a href="/audit">Audit</a></li>
        </ul>
    </div>
    <h1>All Purchases</h1>
    <table id="purchaseTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>Contract Number</th>
          <th>Panel Number</th>
          <th>Description</th>
          <th>Height</th>
          <th>Width</th>
          <th>Length</th>
          <th>Notes</th>
          <!-- Add additional columns here if needed -->
        </tr>
      </thead>
      <tbody>
        <!-- Dynamic rows will be added here -->
      </tbody>
    </table>
    <form
      id="purchaseForm"
      class="deleteMode"
      action="/purchase"
      method="post"
      onsubmit="handleSubmit(event)"
    >
      <h2>Purchase Order</h2>
      <p>Enter purchase details</p>

      <div class="control-row">
        <label for="contractNumberDropDown">Contract Number:</label>
        <select id="contractNumberDropDown" name="contractNumberDropDown">
          <option disabled selected>Select a Contract Number</option>
          <% contractNumbers.forEach(contractNumbers => { %>
          <option value="<%= contractNumbers.ContractNumber %>">
            <%= contractNumbers.ContractNumber %>
          </option>
          <% }); %>
        </select>
      </div>

      <div class="control">
        <label for="panel">Panel:</label>
        <input id="panel" name="panel" required />
      </div>

      <div class="control-row">
        <label for="descriptionDropdown">Description:</label>
        <select id="descriptionDropdown" name="descriptionDropdown">
          <option disabled selected>Select a Description</option>
          <% descriptions.forEach(description => { %>
          <option value="<%= description.Description %>">
            <%= description.Description %>
          </option>
          <% }); %>
        </select>
      </div>

      

      <div class="control">
        <label for="height">Height:</label>
        <input id="height" name="height" required />
      </div>

      <div class="control">
        <label for="width">Width:</label>
        <input id="width" name="width" required />
      </div>
      <div class="control">
        <label for="length">Length:</label>
        <input id="length" name="length" required />
      </div>
      <div class="control">
        <label for="notes">Notes:</label>
        <input id="notes" name="notes" required />
      </div>

      <p class="form-actions">
        <button type="reset" class="button button-flat">Reset</button>
        <button type="submit" class="button">Submit</button>
      </p>
    </form>
    <script>
        
        function handlePopulate() {
        event.preventDefault();

        const selectedContractNumber = document.getElementById(
          "contractNumberDropDown"
        ).value;

        fetch(`/count/purchases/${selectedContractNumber}`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            console.log(data);
            populateTable(data);
          })
          .catch((error) => {
            console.error("Error fetching purchases:", error);
          });
      }

      // Function to fetch description details based on selected description
      function fetchDetails() {
        const selectedDescription = document.getElementById(
          "descriptionDropdown"
        ).value;
        fetch(`/details/${selectedDescription}`)
          .then((response) => response.json())
          .then((details) => {
            document.getElementById("height").value = details.Height;
            document.getElementById("width").value = details.Width;
            document.getElementById("length").value = details.Length;
          })
          .catch((error) => console.error("Error fetching details:", error));
      }

    function populateTable(purchases) {
  const tableBody = document.querySelector("#purchaseTable tbody");
  tableBody.innerHTML = ""; // Clear existing table body

  if (purchases.length === 0) {
    // Handle case where no purchases are returned
    const row = document.createElement("tr");
    const cell = document.createElement("td");
    cell.colSpan = "13"; // Span across all columns
    cell.textContent = "No purchases found.";
    row.appendChild(cell);
    tableBody.appendChild(row);
    return;
  }

  const idDropdown = document.getElementById('contractNumberDropDown');
  purchases.forEach((purchase) => {
    console.log(purchase);
    const row = document.createElement("tr");
    row.setAttribute("data-id", purchase.ID); // Add data-id attribute for identifying the row
    const cells = [
      purchase.ID,
      purchase.ContractNumber,
      purchase.Panel,
      purchase.Description,
      purchase.Height,
      purchase.Width,
      purchase.Length,
      purchase.Notes,
    ];
    const option = document.createElement('option');
    option.value = purchase.ID;
    option.textContent = purchase.ID;
    idDropdown.appendChild(option);

    cells.forEach((cellData, i) => {
  const cell = document.createElement("td");
    cell.textContent = cellData;
  
  row.appendChild(cell);
});

    tableBody.appendChild(row);
  });
}

function handleSubmit(event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // Gather form data
        const formData = new FormData(event.target); // event.target refers to the form element
        console.log(formData);
        const contractNumberSelected = document.getElementById(
          "contractNumberDropDown"
        ).value;
        // Convert formData to JSON
        const jsonData = {};
        formData.forEach((value, key) => {
          jsonData[key] = value;
        });

        // Log the form data for debugging
        // console.log('Form Data:', jsonData);

        // Send the form data via AJAX
        fetch("/count", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(jsonData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            console.log("Form submitted successfully:", data);
            window.location.reload();
            // Optionally, perform any additional actions after form submission
          })
          .catch((error) => {
            console.error("Error submitting form:", error);
          });
      }

      document
        .getElementById("contractNumberDropDown")
        .addEventListener("change", handlePopulate);
   

      // Listen for changes on the dropdown list
      document
        .getElementById("descriptionDropdown")
        .addEventListener("change", fetchDetails);
    </script>
</body>
</html>
