<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Issue</title>
    <!-- Add your CSS styles here -->
    <style>
        table {
          border-collapse: collapse;
          width: 100%;
        }
  
        th,
        td {
          border: 1px solid #dddddd;
          text-align: left;
          padding: 8px;
        }
  
        th {
          background-color: #f2f2f2;
        }
        .hide-column {
          display: none;
        }
  
        #purchaseTable td:nth-child(1),
        #purchaseTable th:nth-child(1),
        #deleteRow {
          display: none;
        }
      </style>
</head>
<body>

    <!-- Navigation bar -->
    <div class="navbar">
        <ul>
            <li><a href="/purchase">Purchase</a></li>
            <li><a href="/delivery">Delivery</a></li>
            <li><a href="/issue">Issue</a></li>
            <li><a href="/return">Return</a></li>
            <li><a href="/count">Count</a></li>
            <li><a href="/audit">Audit</a></li>
        </ul>
    </div>
<h1>Issue</h1>
    <!-- Your main content -->
    <div class="content">
        <!-- Include your main content here -->
    </div>
    <form
    id="purchaseForm"
    class="deleteMode"
    action="/purchase"
    method="post"
    onsubmit="handleSubmit(event)"
  >
    <h2>Issue Order</h2>
    <p>Enter purchase details</p>

    <div class="control-row">
      <label for="contractNumberDropDown">Contract Number:</label>
      <select id="contractNumberDropDown" name="contractNumberDropDown">
        <option disabled selected>Select a Contract Number</option>
        <% contractNumbers.forEach(contractNumbers => { %>
        <option value="<%= contractNumbers.ContractNumber %>">
          <%= contractNumbers.ContractNumber %>
        </option>
        <% }); %>
      </select>
    </div>

    <p class="form-actions">
      <button type="submit" class="button">Submit</button>
    </p>
  </form>
    <table id="purchaseTable">
        <thead>
          <tr>
            <th>ID</th>
            <th>Contract Number</th>
            <th>Panel Number</th>
            <th>Description</th>
            <th>Height</th>
            <th>Width</th>
            <th>Length</th>
            <th>Qty In Stock</th>
            <th>Issue Qty</th>
            <th>Kg Per Length</th>
            <th>Total Length Ordered</th>
          </tr>
        </thead>
        <tbody></tbody>
        <!-- Empty tbody for dynamically populated rows -->
      </table>
      <button id="issueBtn">Issue To Panel</button>
      <script>
document.getElementById("issueBtn").addEventListener("click", function() {
  // Get all rows of the table
  const rows = document.querySelectorAll("#purchaseTable tbody tr");

  // Array to store data for insertion
  const insertData = [];

  // Iterate over rows and extract data for insertion
  rows.forEach(row => {
    // Check if the quantity input is not null
    const qtyInput = row.querySelector("input[name='Qty']");
    const qty = qtyInput ? qtyInput.value.trim() : null;
    const panelInput = row.querySelector("input[name='Panel']");
    const panelNumber = panelInput ? panelInput.value.trim() : null;

    // console.log("Extracted qty value:", qty); // Debugging line

    if (qty !== null && qty !== "") {
      // Extract necessary data from the row
      const contractNumber = row.cells[1].textContent;  
      const description = row.cells[3].textContent; 
      const height = row.cells[4].textContent; 
      const width = row.cells[5].textContent; 
      const length = row.cells[6].textContent; 

      // Add data to insertData array
      insertData.push({ contractNumber, panelNumber, description, height, width, length, qty });
    }
  });

  // console.log("Data to be inserted:", insertData); // Debugging line

  // Send insertData to the server
  fetch("/issue/insertIssueTransaction", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ insertData })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    return response.json();
  })
  .then(data => {
    console.log(data); // Handle response from server if needed
  })
  .catch(error => {
    console.error("Error inserting data:", error);
  });
});

function handleSubmit(event) {
  event.preventDefault();

  const selectedContractNumber = document.getElementById("contractNumberDropDown").value;

  fetch(`/delivery/purchases/${selectedContractNumber}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      populateTable(data);
      fetchQtyInStockForPurchases(data);
    })
    .catch((error) => {
      console.error("Error fetching purchases:", error);
    });
}

function populateTable(purchases) {
  const tableBody = document.querySelector("#purchaseTable tbody");
  tableBody.innerHTML = ""; // Clear existing table body

  if (purchases.length === 0) {
    // Handle case where no purchases are returned
    const row = document.createElement("tr");
    const cell = document.createElement("td");
    cell.colSpan = "13"; // Span across all columns
    cell.textContent = "No purchases found.";
    row.appendChild(cell);
    tableBody.appendChild(row);
    return;
  }

  purchases.forEach((purchase) => {
    const row = document.createElement("tr");
    row.setAttribute("data-id", purchase.ID); // Add data-id attribute for identifying the row
    const cells = [
      purchase.ID,
      purchase.ContractNumber,
      "",
      purchase.Description,
      purchase.Height,
      purchase.Width,
      purchase.Length,
      "", // Leave "Qty In Stock" blank for now
      "",
      purchase.KgPerLength,
      purchase.TotalLengthOrdered,
    ];

    cells.forEach((cellData, i) => {
  const cell = document.createElement("td");

  if (i === 8) {
    // Placeholder for "Issue Qty" cell
    const input = document.createElement("input");
    input.type = "number"; // Assuming these are numerical values
    input.value = ""; // Set the current value as the input's default
    input.name = "Qty";
    input.min = "0"; // Set minimum range
    cell.appendChild(input);
  } else if (i === 7) {
    // Placeholder for "Qty In Stock" cell
    cell.textContent = "Fetching..."; // Display fetching message temporarily
  } else {
    cell.textContent = cellData;
  }
  row.appendChild(cell);
});

    tableBody.appendChild(row);
  });
}

function fetchQtyInStockForPurchases(purchases) {
  purchases.forEach((purchase) => {
    const contractNumber = purchase.ContractNumber;
    const description = purchase.Description;
    fetch(`/issue/qtyInStock?contractNumber=${contractNumber}&description=${description}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then((data) => {
        console.log("Received quantity in stock data:", data);
        if (Array.isArray(data) && data.length > 0 && data[0].hasOwnProperty("QtyReceived")) {
          updateQtyInStock(data[0].QtyReceived, purchase.ID);
        } else {
          throw new Error("Quantity in stock data is missing or invalid.");
        }
      })
      .catch((error) => {
        console.error("Error fetching quantity in stock:", error);
      });
  });
}


function updateQtyInStock(qtyInStockData, purchaseId) {
  // Extract the quantity from the data received from the server
  const qtyInStock = qtyInStockData && qtyInStockData[0] ? qtyInStockData[0].QtyReceived : 0;

  const row = document.querySelector(`#purchaseTable tbody tr[data-id="${purchaseId}"]`);
  const qtyInStockCell = row.querySelector("td:nth-child(8)"); // Assuming it's the 8th cell
  if (qtyInStockCell) {
    qtyInStockCell.textContent = qtyInStock;
  } else {
    console.error("Qty in stock cell not found.");
  }
}
      </script>
    <!-- Add your JavaScript files here -->
</body>
</html>
