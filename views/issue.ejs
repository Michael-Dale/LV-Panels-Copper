<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="node_modules\tabulator-tables\dist\css/tabulator_modern.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/main.css">

    <title>Issue</title>
    <!-- Add your CSS styles here -->
    <style>
      /* CSS code to style Tabulator table headers */
      .tabulator .tabulator-header {
        color: Black; /* Set text color to white */
      }
    </style>
</head>

<body>

    <!-- Navigation bar -->
    <div class="main-nav">
      <ul class="main-nav-list">
        <li><a class="main-nav-link" href="/purchase">Purchase</a></li>
        <li><a class="main-nav-link" href="/delivery">Delivery</a></li>
        <li><a class="main-nav-link" href="/issue">Issue</a></li>
        <li><a class="main-nav-link" href="/return">Return</a></li>
        <li><a class="main-nav-link" href="/count">Count</a></li>
        <li><a class="main-nav-link" href="/audit">Audit</a></li>
      </ul>
    </div>
<h1>Issue</h1>
    <!-- Your main content -->
    <div class="content">
        <!-- Include your main content here -->
    </div>
    <form
    id="purchaseForm"
    class="deleteMode"
    action="/purchase"
    method="post"
    onsubmit="handleSubmit(event)"
  >
    <h2>Issue Order</h2>
    <p>Enter purchase details</p>

    <div class="control-row">
      <label for="contractNumberDropDown" class="labelStyle">Contract Number:</label>
      <select class="dropdownStyle" id="contractNumberDropDown" name="contractNumberDropDown">
        <option disabled selected>Select a Contract Number</option>
        <option value="Stores">Stores</option>
        <% contractNumbers.forEach(contractNumbers => { %>
        <option value="<%= contractNumbers.ContractNumber %>">
          <%= contractNumbers.ContractNumber %>
        </option>
        <% }); %>
      </select>
      <button type="button" class="button" onclick="refreshPage()">Refresh Page</button>
    </div>

    <p class="form-actions">
      <button type="submit" class="button">Submit</button>
    </p>
  </form>
  <div class="height">
    <table id="purchaseTable" style="display: none;">
        <thead>
          <tr>
            <th>ID</th>
            <th>Contract Number</th>
            <th>Panel Number</th>
            <th>Description</th>
            <th>Height</th>
            <th>Width</th>
            <th>Length</th>
            <th>Qty In Stock</th>
            <th>Issue Qty</th>
            <th>Kg Per Length</th>
            <th>Total Length Ordered</th>
          </tr>
        </thead>
        <tbody></tbody>
        <!-- Empty tbody for dynamically populated rows -->
      </table>
    </div>
      <button id="issueBtn" class="button">Issue To Panel</button>
      <script src="node_modules\tabulator-tables\dist/js/tabulator.min.js"></script>
    <script>
       var table;
          let qtyInStock=[];
document.getElementById("issueBtn").addEventListener("click", function() {


   // Get table data
   var tableData = table.getData(true); // Use getData(true) to get raw data values

  // Array to store data for insertion
  const insertData = [];

  // Iterate over rows and extract data for insertion
  tableData.forEach(row => {
    // Check if the quantity input is not null
    const qty = row.Qty;
    const contractNumber = row.ContractNumber;
    const panelNumber = row.Panel;

    // console.log("Extracted qty value:", qty); // Debugging line

    if (qty !== null && qty !== "" && qty !== "Qty") {
      // Extract necessary data from the row
      const description = row.Description; 
      const height = row.Height; 
      const width = row.Width; 
      const length = row.Length; 

      // Add data to insertData array
      insertData.push({ contractNumber, panelNumber, description, height, width, length, qty });
      console.log(insertData+"Insert Data"); // Debugging line
    }
  });

  // console.log("Data to be inserted:", insertData); // Debugging line

  // Send insertData to the server
  fetch("/issue/insertIssueTransaction", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ insertData })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    return response.json();
  })
  .then(data => {
    console.log(data); // Handle response from server if needed
  })
  .catch(error => {
    console.error("Error inserting data:", error);
  });
  window.location.reload();
});
  
function handleSubmit(event) {
  event.preventDefault();
  const selectedContractNumber = document.getElementById("contractNumberDropDown").value;
console.log(selectedContractNumber);
if(selectedContractNumber=="Stores"){
  fetch(`/issue/purchasesStores`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      populateTableStores(data);
      // console.log(data);
    })
    .catch((error) => {
      console.error("Error fetching purchases:", error);
    });
}else{
  fetch(`/issue/purchases/${selectedContractNumber}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      populateTable(data);
      // fetchQtyInStockForPurchases(data);
      console.log(data);
    })
    .catch((error) => {
      console.error("Error fetching purchases:", error);
    });
}

}

function populateTable(purchases) {
  const tableBody = document.querySelector("#purchaseTable tbody");
  tableBody.innerHTML = ""; // Clear existing table body

  if (purchases.length === 0) {
    // Handle case where no purchases are returned
    const row = document.createElement("tr");
    const cell = document.createElement("td");
    cell.colSpan = "13"; // Span across all columns
    cell.textContent = "No purchases found.";
    row.appendChild(cell);
    tableBody.appendChild(row);
    return;
  }

  purchases.forEach((purchase) => {
    const row = document.createElement("tr");
    row.setAttribute("data-id", purchase.ID); // Add data-id attribute for identifying the row
    const cells = [
      purchase.ID,
      purchase.ContractNumber,
      "Panel",
      purchase.Description,
      purchase.Height,
      purchase.Width,
      purchase.Length,
      purchase.QtyReceived, // Leave "Qty In Stock" blank for now
      "Qty",
      purchase.KgPerLength,
      purchase.TotalLengthOrdered,
    ];

    cells.forEach((cellData, i) => {
            const cell = document.createElement("td");

            cell.textContent = cellData;
            row.appendChild(cell);
          });

    tableBody.appendChild(row);
  });
  document.getElementById("purchaseTable").style.display="";
  tab();
}

function populateTableStores(purchases) {
  const tableBody = document.querySelector("#purchaseTable tbody");
  tableBody.innerHTML = ""; // Clear existing table body

  if (purchases.length === 0) {
    // Handle case where no purchases are returned
    const row = document.createElement("tr");
    const cell = document.createElement("td");
    cell.colSpan = "13"; // Span across all columns
    cell.textContent = "No purchases found.";
    row.appendChild(cell);
    tableBody.appendChild(row);
    return;
  }

  purchases.forEach((purchase) => {
    const row = document.createElement("tr");
    row.setAttribute("data-id", purchase.ID); // Add data-id attribute for identifying the row
    const cells = [
      purchase.ID,
      purchase.ContractNumber,
      "Panel",
      purchase.Description,
      purchase.Height,
      purchase.Width,
      purchase.Length,
      purchase.QtyReturned, // Leave "Qty In Stock" blank for now
      "Qty",
      purchase.KgPerLength,
      purchase.TotalLengthOrdered,
    ];

    cells.forEach((cellData, i) => {
            const cell = document.createElement("td");

            cell.textContent = cellData;
            row.appendChild(cell);
          });

    tableBody.appendChild(row);
  });
  document.getElementById("purchaseTable").style.display="";
  tab();
}

function tab()
      {
         // Initialize Tabulator on the purchaseTable
    table = new Tabulator("#purchaseTable", {
      // Define column headers based on thead
      columns: [
        { title: "ID", field: "ID", width: 75 },
        { title: "Contract Number", field: "ContractNumber",editor:"input" ,minWidth: 175 },
        { title: "Panel Number", field: "Panel",editor:"input", width: 150},
        { title: "Description", field: "Description",width: 125  },
        { title: "Height", field: "Height" , width: 100},
        { title: "Width", field: "Width" , width: 100},
        { title: "Length", field: "Length" , width: 100},
        { title: "Qty In Stock", field: "OrderQty" , width: 150},
        { title: "Issue Qty", field: "Qty" ,editor:"input", width: 150},
        { title: "Kg Per Length", field: "KgPerLength" , width: 150},
        { title: "Total Length Ordered", field: "TotalLengthOrdered" }
      ],
      layout: "fitColumns",
      width: "100%",
       // Set height to 400px
    height: 250,
    // Enable vertical scrolling
    scrollVertical: true,
    });
      }

// function fetchQtyInStockForPurchases(purchases) {
//   purchases.forEach((purchase) => {
//     const contractNumber = purchase.ContractNumber;
//     const description = purchase.Description;
//     fetch(`/issue/qtyInStock?contractNumber=${contractNumber}&description=${description}`)
//       .then((response) => {
//         if (!response.ok) {
//           throw new Error("Network response was not ok");
//         }
//         return response.json();
//       })
//       .then((data) => {
//         // console.log("Received quantity in stock data:", data);
//         if (Array.isArray(data) && data.length > 0 && data[0].hasOwnProperty("QtyReceived")) {
//           for(let i=0;i<data.length;i++)
//           {
//             updateQtyInStock(data[i].QtyReceived, purchase.ID);
//           }
//           data=[];

//         } else {
//           throw new Error("Quantity in stock data is missing or invalid.");
//         }
//       })
//       .catch((error) => {
//         console.error("NOT IMPORTANT Error fetching quantity in stock:", error);
//       });
//   });
// }

// function fetchQtyInStockForReturn(purchases) {
//   purchases.forEach((purchase) => {
//     const contractNumber = purchase.ContractNumber;
//     const description = purchase.Description;
//     fetch(`/issue/returnQty`)
//       .then((response) => {
//         if (!response.ok) {
//           throw new Error("Network response was not ok");
//         }
//         return response.json();
//       })
//       .then((data) => {
//         // console.log("Received quantity in stock data:", data);
//         if (Array.isArray(data) && data.length > 0 && data[0].hasOwnProperty("QtyReturned")) {
//           for(let i=0;i<data.length;i++)
//           {
//             updateQtyInStock(data[i].QtyReturned, purchase.ID);
//             console.log(data[i].QtyReturned);
//           }

//         } else {
//           throw new Error("Quantity in stock data is missing or invalid.");
//         }
//       })
//       .catch((error) => {
//         console.error("NOT IMPORTANT Error fetching quantity in stock:", error);
//       });
//   });
// }

function updateQtyInStock(qtyInStockData, purchaseId) {
  console.log(qtyInStockData+"data");
  // Extract the quantity from the data received from the server
  qtyInStock.push(qtyInStockData);
  for(let i = 1; i<qtyInStock.length+1;i++){

    const cell8 = document.querySelector(`#purchaseTable tbody tr:nth-child(${i}) td:nth-child(8)`);

// Update the content of the cell with the quantity in stock
cell8.textContent = qtyInStock[i-1];
  }

}
function refreshPage() {
    window.location.reload();
  }
      </script>
    <!-- Add your JavaScript files here -->
</body>
</html>
